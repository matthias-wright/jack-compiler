var searchIndex = JSON.parse('{\
"jack_compiler":{"doc":"A compiler front-end for the Jack programming language, as …","t":[0,0,0,0,5,0,5,5,3,11,11,12,11,11,11,11,12,11,11,11,11,3,11,11,0,11,11,11,11,0,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,0,12,0,11,11,0,0,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,12,13,4,3,13,13,13,13,13,13,3,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,3,13,3,13,3,13,3,4,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,3,3,3,3,4,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,4,3,4,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,11,0,11,11,11,11,13,4,13,13,13,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11],"n":["io","parser","tokenizer","vm_writer","get_file_paths","line","read_file","write_file","Line","borrow","borrow_mut","content","fmt","from","into","new","number","replace_content","try_from","try_into","type_id","Parser","borrow","borrow_mut","error","from","into","new","parse","parse_tree","try_from","try_into","type_id","ParseError","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","ParseTree","borrow","borrow_mut","class","class_node","expression","from","into","statement","subroutine","try_from","try_into","type_id","var","ClassNode","ClassVarNode","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","into","into","name","names","subroutines","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","var_kind","var_type","variables","Expression","ExpressionElement","ExpressionNode","Identifier","IntegerConstant","KeywordConstant","Operator","StringConstant","SubroutineCall","SubroutineCallNode","Symbol","Term","Term","TermElement","TermNode","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caller","elements","elements","expression_list","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","semicolon","subroutine_name","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","Do","DoStatementNode","If","IfStatementNode","Let","LetStatementNode","Return","ReturnStatementNode","Statement","While","WhileStatementNode","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","condition","condition","else_block","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","if_block","into","into","into","into","into","into","lhs_expression","rhs_expression","subroutine_call","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","var_name","0","0","0","0","0","Constructor","Function","Method","ParameterListNode","ParameterNode","SubroutineBodyNode","SubroutineNode","SubroutineType","body","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","into","into","into","into","into","name","name","parameter_list","parameters","return_type","statements","subroutine_type","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","var_type","variables","Arg","Boolean","Char","ClassName","Field","Int","Static","Var","VarKind","VarNode","VarType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class_var","clone","clone","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","get","get","into","into","into","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","var_kind","var_names","var_type","0","Tokenizer","borrow","borrow_mut","from","into","new","tokenize","tokens","try_from","try_into","type_id","write_xml","BooleanConstant","Constant","Constant","Identifier","IntegerConstant","Keyword","StringConstant","Symbol","Token","TokenWrapper","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","into","into","into","line","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0","0","0","VMWriter","borrow","borrow_mut","from","into","new","try_from","try_into","type_id","write"],"q":["jack_compiler","","","","jack_compiler::io","","","","jack_compiler::io::line","","","","","","","","","","","","","jack_compiler::parser","","","","","","","","","","","","jack_compiler::parser::error","","","","","","","","","","","jack_compiler::parser::parse_tree","","","","","","","","","","","","","","jack_compiler::parser::parse_tree::class","","","","","","","","","","","","","","","","","","","","","","","","","","","","jack_compiler::parser::parse_tree::expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jack_compiler::parser::parse_tree::expression::ExpressionElement","","jack_compiler::parser::parse_tree::expression::TermElement","","","","","","","","jack_compiler::parser::parse_tree::statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jack_compiler::parser::parse_tree::statement::Statement","","","","","jack_compiler::parser::parse_tree::subroutine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jack_compiler::parser::parse_tree::var","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jack_compiler::parser::parse_tree::var::VarType","jack_compiler::tokenizer","","","","","","","","","","","","jack_compiler::tokenizer::tokens","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jack_compiler::tokenizer::tokens::Constant","","","jack_compiler::tokenizer::tokens::Token","","","","jack_compiler::vm_writer","","","","","","","","",""],"d":["This module handles file reading and writing.","Reads the tokens and builds a parse tree.","Reads text files containing Jack code and produces a list …","Takes in a parse tree and writes the corresponding VM code.","Returns the paths of all the Jack files in the specified …","","Reads a Jack file and returns a Vec containing a <code>Line</code> for …","Writes the specified content to the specified file.","Holds a line of Jack code and the corresponding line …","","","","","","","","","","","","","Reads the tokens and builds a parse tree.","","","Defines parse errors.","","","","Takes in a Vec of <code>TokenWrapper</code> values, and returns a …","Defines the parse tree.","","","","This error occurs when the Jack code violates the syntax …","","","","","","","","","","","Defines the parse tree.","","","Represents a class in the parse tree.","","Represents an expression in the parse tree.","","","Represents the statements in the parse tree.","Represents a subroutine in the parse tree.","","","","Represents the variables in the parse tree.","Represents a class in the parse tree. Grammar rule: <code>class</code> …","Represents the variables of class. Grammar rule: (<code>static</code> | …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an expression element. An expression element is …","Represents an expression in the parse tree. Grammar rule: …","","","","","","","Represents a term in the parse tree. Grammar rule: …","","","","Represents a term in the parse tree. Grammar rule: …","Represents a term in the parse tree. A term node can …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a do statement in the parse tree. Grammar rule: …","","Represents an if statement in the parse tree. Grammar …","","Represents a let statement in the parse tree. Grammar …","","Represents a return statement in the parse tree. Grammar …","Represents a statement in the parse tree.","","Represents a while statement in the parse tree. Grammar …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a parameter list in the parse tree. Grammar …","Represents a parameter in the parse tree.","Represents a subroutine body in the parse tree. Grammar …","Represents a subroutine in the parse tree. Grammar rule: (…","The subroutine type: <code>constructor</code>, <code>function</code>, or <code>method</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The variable kind: <code>static</code>, <code>field</code>, <code>argument</code>, <code>variable</code> …","Represents a variable in the parse tree.","The variable type: <code>int</code>, <code>char</code>, <code>boolean</code>, <code>className</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reads text files containing Jack code and produces a list …","","","","","","Takes in a Vec of <code>Line</code> values, one for each line in the …","Defines the token.","","","","Returns the XML representation of the given tokens, as …","","","","","","","","","","Wrapper type that holds a token and the corresponding <code>Line</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes in a parse tree and writes the corresponding VM code.","","","","","","","","","Takes in a <code>ParseTree</code> and returns a string containing the …"],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,0,2,2,2,2,0,2,2,2,0,3,3,3,3,3,3,3,3,3,3,0,4,4,0,4,0,4,4,0,0,4,4,4,0,0,0,5,6,5,6,5,5,6,6,5,6,5,6,5,6,5,5,6,5,6,5,6,5,6,6,6,5,7,0,0,7,7,7,8,7,7,0,7,8,7,0,0,9,8,10,7,11,9,8,10,7,11,11,9,10,11,9,9,8,8,10,10,7,7,11,11,9,8,10,7,11,9,8,10,7,11,11,11,9,8,10,7,11,9,8,10,7,11,9,8,10,7,11,9,8,10,7,11,12,13,14,15,16,17,18,19,20,21,22,0,22,0,22,0,22,0,0,22,0,23,22,23,24,25,26,27,22,23,24,25,26,27,23,24,24,25,22,22,23,23,24,24,25,25,26,26,27,27,22,23,24,25,26,27,24,22,23,24,25,26,27,26,26,27,22,23,24,25,26,27,22,23,24,25,26,27,22,23,24,25,26,27,22,23,24,25,26,27,26,28,29,30,31,32,33,33,33,0,0,0,0,0,34,34,35,36,37,33,34,35,36,37,33,33,33,34,34,35,35,36,36,37,37,33,33,34,35,36,37,33,33,34,35,36,37,33,34,37,34,36,34,35,34,33,34,35,36,37,33,34,35,36,37,33,34,35,36,37,33,34,35,36,37,33,37,35,38,39,39,39,38,39,38,38,0,0,0,40,38,39,40,38,39,40,38,39,38,39,40,40,38,38,39,39,40,38,39,38,39,40,38,39,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,40,40,41,0,42,42,42,42,42,42,0,42,42,42,42,43,0,44,44,43,44,43,44,0,0,45,44,43,45,44,43,45,44,43,45,44,43,45,44,43,45,45,45,44,43,45,44,43,45,44,43,46,47,48,49,50,51,52,0,53,53,53,53,53,53,53,53,53],"f":[null,null,null,null,[[["str",15]],[["string",3],["vec",3,["string"]]]],null,[[["str",15]],[["rc",3,["line"]],["vec",3,["rc"]]]],[[["str",15]]],null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15],["usize",15]],["line",3]],null,[[["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[],["parser",3]],[[["tokenwrapper",3],["vec",3,["tokenwrapper"]],["str",15]],["parsetree",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,null,null,[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["subroutinetype",4]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["subroutinetype",4]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["varkind",4]],[[],["vartype",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",15]],["varkind",4]],[[["str",15]],["vartype",4]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["tokenizer",3]],[[["rc",3,["line"]],["vec",3,["rc"]]],[["tokenwrapper",3],["vec",3,["tokenwrapper"]]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["tokenwrapper",3],["vec",3,["tokenwrapper"]]],["string",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["vmwriter",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["parsetree",3]],["string",3]]],"p":[[3,"Line"],[3,"Parser"],[3,"ParseError"],[3,"ParseTree"],[3,"ClassNode"],[3,"ClassVarNode"],[4,"TermElement"],[4,"ExpressionElement"],[3,"ExpressionNode"],[3,"TermNode"],[3,"SubroutineCallNode"],[13,"Term"],[13,"Operator"],[13,"Identifier"],[13,"Symbol"],[13,"IntegerConstant"],[13,"KeywordConstant"],[13,"StringConstant"],[13,"Expression"],[13,"Term"],[13,"SubroutineCall"],[4,"Statement"],[3,"WhileStatementNode"],[3,"IfStatementNode"],[3,"ReturnStatementNode"],[3,"LetStatementNode"],[3,"DoStatementNode"],[13,"Let"],[13,"If"],[13,"While"],[13,"Do"],[13,"Return"],[4,"SubroutineType"],[3,"SubroutineNode"],[3,"SubroutineBodyNode"],[3,"ParameterListNode"],[3,"ParameterNode"],[4,"VarKind"],[4,"VarType"],[3,"VarNode"],[13,"ClassName"],[3,"Tokenizer"],[4,"Constant"],[4,"Token"],[3,"TokenWrapper"],[13,"IntegerConstant"],[13,"StringConstant"],[13,"BooleanConstant"],[13,"Symbol"],[13,"Keyword"],[13,"Constant"],[13,"Identifier"],[3,"VMWriter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};